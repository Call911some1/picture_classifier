import streamlit as st
from PIL import Image
import torch
import torchvision.transforms as transforms
import torchvision.models as models
from torchvision.models import efficientnet_b0
import time
import matplotlib.pyplot as plt
import numpy as np
import requests
from io import BytesIO

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
num_classes = 10
class_names = {
    0: "AnnualCrop", 1: "Forest", 2: "HerbaceousVegetation", 3: "Highway",
    4: "Industrial", 5: "Pasture", 6: "PermanentCrop", 7: "Residential", 
    8: "River", 9: "SeaLake"
}

# –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–æ–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
st.markdown("""
    <div style='background-color: #1a1a1a; padding: 15px; border-radius: 10px;'>
        <h1 style='color: #00cc66; text-align: center;'>üåç –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h1>
        <h3 style='color: #e6f7ff; text-align: center;'>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h3>
        <p style='text-align: center; color: #e6f7ff; font-size: 16px;'>
            –î–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤–µ –º–æ–¥–µ–ª–∏: <strong>ResNet-50</strong> –∏ <strong>EfficientNet-B0</strong> 
            –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ 10 —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, —Ç–∞–∫–∏–º –∫–∞–∫ <em>Forest</em>, <em>River</em> –∏ —Ç.–¥.
            –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏, –∞ —Ç–∞–∫–∂–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏. 
            –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤.
        </p>
    </div>
""", unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
def load_model(model_name):
    if model_name == "ResNet-50":
        model = models.resnet50()
        model.fc = torch.nn.Linear(model.fc.in_features, num_classes)
        # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 'map_location'
        model.load_state_dict(torch.load('models/resnet50_eurosat.pth', map_location=torch.device('cpu')))
    elif model_name == "EfficientNet-B0":
        model = efficientnet_b0(weights=None)
        model.classifier[1] = torch.nn.Linear(model.classifier[1].in_features, num_classes)
        # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 'map_location'
        model.load_state_dict(torch.load('models/efficientnet_b0_eurosat.pth', map_location=torch.device('cpu')))
    model.eval()
    return model

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
resnet_model = load_model("ResNet-50")
efficientnet_model = load_model("EfficientNet-B0")

# –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ
st.markdown("## –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ")
image_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")

if image_url:
    try:
        response = requests.get(image_url)
        image = Image.open(BytesIO(response.content)).convert("RGB")
        st.image(image, caption=f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ", use_column_width=True)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ: {e}")
        image = None

# –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ñ–æ—Ä–º–∞—Ç—ã: jpg, jpeg, png):", type=["jpg", "jpeg", "png"], accept_multiple_files=True)

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
images = []

if uploaded_files:
    for uploaded_file in uploaded_files:
        image = Image.open(uploaded_file).convert("RGB")
        st.image(image, caption=f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {uploaded_file.name}", use_column_width=True)
        images.append((image, uploaded_file.name))

# –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø–æ —Å—Å—ã–ª–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
if image_url and image is not None:
    images.append((image, "Image from URL"))

# –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
if images:
    st.markdown("---")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    for img, img_name in images:
        st.subheader(f"üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_name}")
        image_tensor = transform(img).unsqueeze(0)

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ ResNet-50")
            start_time = time.time()
            with torch.no_grad():
                output_resnet = resnet_model(image_tensor)
            end_time = time.time()
            resnet_time = end_time - start_time
            top5_resnet_prob, top5_resnet_classes = torch.topk(torch.softmax(output_resnet, 1), 5)
            st.info(f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {resnet_time:.4f} —Å–µ–∫—É–Ω–¥")

            for i in range(5):
                class_idx = top5_resnet_classes[0][i].item()
                class_name = class_names[class_idx]
                probability = top5_resnet_prob[0][i].item() * 100
                st.write(f"**–ö–ª–∞—Å—Å {class_idx}: {class_name}** - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability:.2f}%")

        with col2:
            st.subheader("üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ EfficientNet-B0")
            start_time = time.time()
            with torch.no_grad():
                output_efficientnet = efficientnet_model(image_tensor)
            end_time = time.time()
            efficientnet_time = end_time - start_time
            top5_efficientnet_prob, top5_efficientnet_classes = torch.topk(torch.softmax(output_efficientnet, 1), 5)
            st.info(f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {efficientnet_time:.4f} —Å–µ–∫—É–Ω–¥")

            for i in range(5):
                class_idx = top5_efficientnet_classes[0][i].item()
                class_name = class_names[class_idx]
                probability = top5_efficientnet_prob[0][i].item() * 100
                st.write(f"**–ö–ª–∞—Å—Å {class_idx}: {class_name}** - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability:.2f}%")

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏ —Å –ø–æ–º–æ—â—å—é matplotlib
    st.markdown("---")
    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    resnet_values = [top5_resnet_prob[0][i].item() * 100 for i in range(5)]
    efficientnet_values = [top5_efficientnet_prob[0][i].item() * 100 for i in range(5)]
    labels = [f"–ö–ª–∞—Å—Å {top5_resnet_classes[0][i].item()}:\n{class_names[top5_resnet_classes[0][i].item()]}" for i in range(5)]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–≤—É—Ö —Å—Ç–æ–ª–±—á–∞—Ç—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º —Ä—è–¥–æ–º
    x = np.arange(len(labels))  # –ú–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤

    fig, ax = plt.subplots(figsize=(10, 5))
    width = 0.35  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    bars1 = ax.bar(x - width/2, resnet_values, width, label='ResNet-50', color='#1f77b4')
    bars2 = ax.bar(x + width/2, efficientnet_values, width, label='EfficientNet-B0', color='#ff7f0e')

    # –ü–æ–¥–ø–∏—Å–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å–µ–π
    ax.set_xlabel('–ö–ª–∞—Å—Å—ã')
    ax.set_ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)')
    ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π ResNet-50 –∏ EfficientNet-B0')
    ax.set_xticks(x)
    ax.set_xticklabels(labels, rotation=30, ha='right')
    ax.set_ylim(0, 100)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Å–∏ Y –æ—Ç 0 –¥–æ 100%

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã
    ax.legend()

    # –ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Streamlit
    st.pyplot(fig)